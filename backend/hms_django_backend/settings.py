"""
Django settings for hms_django_backend project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import environ  # For loading environment variables
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv  # For loading .env file

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Load .env file ---
# This will load environment variables from a .env file in the BASE_DIR
# Create a .env file in the same directory as manage.py for local development
env_path = BASE_DIR / '.env'
load_dotenv(dotenv_path=env_path)

# --- Logging Directory ---
# Ensure the logs directory exists
LOGS_DIR = BASE_DIR / 'logs'
if not LOGS_DIR.exists():
    try:
        LOGS_DIR.mkdir(parents=True, exist_ok=True)
    except OSError:
        # Handle potential errors during directory creation, e.g., permissions
        print(
            f"Warning: Could not create logs directory {LOGS_DIR}. Logging to file might fail.")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# --- Security Settings ---
# SECURITY WARNING: keep the secret key used in production secret!
# Get SECRET_KEY from environment variable or use a fallback (less secure for production)
SECRET_KEY = os.environ.get(
    'DJANGO_SECRET_KEY', 'django-insecure-development-fallback-key-!change-me!')

# SECURITY WARNING: don't run with debug turned on in production!
# Defaults to True if DJANGO_DEBUG is not set
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

# --- Allowed Hosts ---
# Get ALLOWED_HOSTS from environment variable, split by comma, or use defaults
ALLOWED_HOSTS_STRING = os.environ.get(
    'DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1')
ALLOWED_HOSTS = [host.strip()
                 for host in ALLOWED_HOSTS_STRING.split(',') if host.strip()]
# In debug mode, allow all hosts for convenience if '*' is not already present
if DEBUG and '*' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append('*')


# --- Application definition ---
INSTALLED_APPS = [
    # Project Apps (Order can matter for templates/static files if overriding)
    'users.apps.UsersConfig',  # User management, custom user model
    'patients.apps.PatientsConfig',  # Patient profiles, medical records
    'appointments.apps.AppointmentsConfig',  # Appointment scheduling
    # Prescriptions, treatments, observations
    'medical_management.apps.MedicalManagementConfig',
    'billing.apps.BillingConfig',  # Invoicing and payments
    'telemedicine.apps.TelemedicineConfig',  # Telemedicine sessions
    'admin_dashboard.apps.AdminDashboardConfig',  # Custom admin dashboard features
    'inquiries.apps.InquiriesConfig',  # For handling patient/visitor inquiries
    'audit_log.apps.AuditLogConfig',  # For logging user actions and system events

    # Django Core Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party Apps
    'rest_framework',           # Django REST framework for APIs
    'rest_framework.authtoken',  # Token-based authentication for DRF
    'drf_yasg',                 # API documentation (Swagger/ReDoc)
    'django_filters',           # Filtering for DRF
    # 'corsheaders', # Uncomment if you need Cross-Origin Resource Sharing
    # 'django_celery_beat', # If using Celery Beat for scheduled tasks
    # 'django_celery_results', # If using Celery with Django backend for results
    # 'anymail', # If using a transactional email service like SendGrid, Mailgun
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Manages sessions across requests
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'corsheaders.middleware.CorsMiddleware', # Uncomment if using django-cors-headers
    # For internationalization (i18n)
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    # Cross-Site Request Forgery protection
    'django.middleware.csrf.CsrfViewMiddleware',
    # Associates users with requests using sessions
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',  # For flash messages
    # Protection against clickjacking
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Custom middleware for audit logging context
    'audit_log.middleware.AuditLogMiddleware',
]

ROOT_URLCONF = 'hms_django_backend.urls'
WSGI_APPLICATION = 'hms_django_backend.wsgi.application'  # For WSGI deployments
# For ASGI deployments (e.g., Channels)
ASGI_APPLICATION = 'hms_django_backend.asgi.application'


# --- Templates ---
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Project-level templates directory
        'APP_DIRS': True,  # Allow Django to look for templates in app directories
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                # Adds the HttpRequest object to template context
                'django.template.context_processors.request',
                # Adds user and perms to template context
                'django.contrib.auth.context_processors.auth',
                # Adds messages to template context
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',  # For language settings in templates
            ],
        },
    },
]

# --- Database ---
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# Initialize django-environ
env = environ.Env(
    # Define schema for environment variables with (TYPE, DEFAULT_VALUE_IF_NOT_SET_IN_ENV)
    # The key (e.g., DB_NAME) is the name of the environment variable to read.
    # The default value here is used if the env var is not set AND no default is provided in the env() call below.
    DB_NAME=(str, 'hms_dev_db_schema_default'),  # Example schema default
    DB_ENGINE=(str, 'django.db.backends.postgresql'),  # Corrected: type is str
    # Corrected: type is str
    DB_USER=(str, 'your_supabase_db_user_fallback_schema'),
    # Corrected: type is str
    DB_PASSWORD=(str, 'your_supabase_db_password_fallback_schema'),
    # Corrected: type is str
    DB_HOST=(str, 'your_supabase_db_host_fallback_schema'),
    DB_PORT=(int, 6543),  # Corrected: type is int
    # For test database name
    TEST_DB_NAME=(str, 'test_hms_dev_db_schema_default')
)

# Database configuration using django-environ
# The default in env() call takes precedence over the schema default if the env var is not found.
DATABASES = {
    'default': {
        # Default to PostgreSQL
        'ENGINE': env('DB_ENGINE', default='django.db.backends.postgresql'),
        'NAME': env('DB_NAME', default='postgres'),  # Default Supabase DB name
        'USER': env('DB_USER', default='your_supabase_db_user_fallback'),
        'PASSWORD': env('DB_PASSWORD', default='your_supabase_db_password_fallback'),
        'HOST': env('DB_HOST', default='your_supabase_db_host_fallback'),
        # Default Supabase pooler port (integer)
        'PORT': env('DB_PORT', default=6543),
        'OPTIONS': {
            # Example for PostgreSQL SSL:
            # 'sslmode': env('DB_SSLMODE', default='prefer'), # e.g., 'require' for Supabase
        },
        'TEST': {
            # Use env() for test database name as well, allowing override via .env
            'NAME': env('TEST_DB_NAME', default=f"test_{env('DB_NAME', default='postgres')}"),
        },
    }
}


# --- Authentication ---
AUTH_USER_MODEL = 'users.CustomUser'  # Specifies the custom user model

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 10}},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Default login URL (e.g., for @login_required decorator)
LOGIN_URL = '/admin/login/'
# LOGIN_REDIRECT_URL = '/' # Where to redirect after successful login if no 'next' param
LOGOUT_REDIRECT_URL = '/'  # Where to redirect after logout

# --- Internationalization (i18n) & Localization (l10n) ---
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = os.environ.get(
    'DJANGO_LANGUAGE_CODE', 'en-us')  # Default language
# LANGUAGES = [
#     ('en', _('English')),
#     ('fr', _('French')),
#     # Add other languages your application supports
# ]
# LOCALE_PATHS = [BASE_DIR / 'locale'] # Directory for translation files

# Set to your project's time zone
TIME_ZONE = os.environ.get('DJANGO_TIME_ZONE', 'Africa/Johannesburg')
USE_I18N = True  # Enable Django's translation system
USE_L10N = True  # Enable formatting dates, numbers, etc., according to current locale
USE_TZ = True  # Enable timezone-aware datetimes

# --- Static files (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # For collectstatic in production
STATICFILES_DIRS = [
    BASE_DIR / 'static',  # Project-wide static files
]
# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage' # For caching

# --- Media files (User-uploaded content) ---
# https://docs.djangoproject.com/en/5.0/topics/files/
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'mediafiles'

# --- Default primary key field type ---
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Django REST framework settings ---
# https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',  # For token-based API auth
        # 'rest_framework.authentication.SessionAuthentication', # If using DRF browsable API with login
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # Default to requiring authentication
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,  # Default number of items per page
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',  # For field filtering
        'rest_framework.filters.SearchFilter',               # For search functionality
        'rest_framework.filters.OrderingFilter',             # For ordering results
    ],
    'DEFAULT_THROTTLE_CLASSES': [  # For API rate limiting
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {  # Define rates for different scopes
        'anon': '100/hour',  # For anonymous users
        'user': '1000/hour',  # For authenticated users
        'login_attempts': '10/minute',  # Specific scope for login attempts
        'register_attempts': '20/hour',  # Specific scope for registration
        'inquiry_creation': '30/hour',  # Specific scope for inquiry creation
        # Add other custom scopes as needed
    },
    # For OpenAPI schema generation
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.openapi.AutoSchema',
    # Default format for DRF test client requests
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
}

# --- Email Configuration ---
# https://docs.djangoproject.com/en/5.0/topics/email/
EMAIL_BACKEND = os.environ.get(
    'DJANGO_EMAIL_BACKEND',
    'django.core.mail.backends.console.EmailBackend' if DEBUG else 'django.core.mail.backends.smtp.EmailBackend'
)
EMAIL_HOST = os.environ.get('DJANGO_EMAIL_HOST', 'localhost')
EMAIL_PORT = int(os.environ.get('DJANGO_EMAIL_PORT', 25))  # Ensure it's an int
EMAIL_USE_TLS = os.environ.get('DJANGO_EMAIL_USE_TLS', 'False') == 'True'
EMAIL_USE_SSL = os.environ.get(
    'DJANGO_EMAIL_USE_SSL', 'False') == 'True'  # Less common than TLS
EMAIL_HOST_USER = os.environ.get('DJANGO_EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('DJANGO_EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get(
    'DJANGO_DEFAULT_FROM_EMAIL', 'noreply@hms.example.com')
# For error emails to admins
SERVER_EMAIL = os.environ.get('DJANGO_SERVER_EMAIL', DEFAULT_FROM_EMAIL)

# --- Admins and Managers (for error reporting) ---
# e.g., "Admin Name <admin@example.com>,Another Admin <another@example.com>"
ADMINS_STRING = os.environ.get('DJANGO_ADMINS', '')
ADMINS = []
if ADMINS_STRING:
    try:
        # Parse "Name <email>" format
        ADMINS = [tuple(admin.strip().rsplit(' <', 1)) for admin in ADMINS_STRING.split(
            ',') if '<' in admin and '>' in admin]
        ADMINS = [(name, email[:-1])
                  for name, email in ADMINS]  # Remove trailing '>'
    except Exception:
        print(
            f"Warning: Could not parse DJANGO_ADMINS environment variable: {ADMINS_STRING}")
MANAGERS = ADMINS


# --- Logging Configuration ---
# https://docs.djangoproject.com/en/5.0/topics/logging/
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Keep Django's default loggers active
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',  # Use brace-style formatting
        },
        'simple': {
            'format': '[{asctime}] {levelname} {module}.{funcName}: {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',  # Output to console
            'formatter': 'simple',
        },
        'file_general': {  # General application log
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'hms_general.log',
            'maxBytes': 1024 * 1024 * 10,  # 10 MB
            'backupCount': 5,  # Number of backup files
            'formatter': 'verbose',
        },
        'file_debug': {  # Detailed debug log (use in development)
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'hms_debug.log',
            'maxBytes': 1024 * 1024 * 10,  # 10 MB
            'backupCount': 3,
            'formatter': 'verbose',
        },
        'mail_admins': {  # Send ERROR level logs to ADMINS
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,  # Send HTML emails
        }
    },
    'root': {  # Root logger configuration
        # Add mail_admins if not DEBUG and ADMINS are set
        'handlers': ['console', 'file_general'] + (['mail_admins'] if not DEBUG and ADMINS else []),
        # Default root log level
        'level': os.environ.get('DJANGO_LOG_LEVEL', 'INFO'),
    },
    'loggers': {  # Specific logger configurations
        'django': {  # Django's own loggers
            'handlers': ['console', 'file_general'] + (['mail_admins'] if not DEBUG and ADMINS else []),
            # Level for Django's logs
            'level': os.environ.get('DJANGO_LOG_LEVEL_DJANGO', 'INFO'),
            'propagate': False,  # Don't pass to root logger if handled here
        },
        'django.request': {  # For request errors
            'handlers': ['mail_admins', 'file_general'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Example: Custom loggers for your apps
        'users': {'handlers': ['console', 'file_debug' if DEBUG else 'file_general'], 'level': 'DEBUG' if DEBUG else 'INFO', 'propagate': False},
        'patients': {'handlers': ['console', 'file_debug' if DEBUG else 'file_general'], 'level': 'DEBUG' if DEBUG else 'INFO', 'propagate': False},
        'audit_log': {'handlers': ['console', 'file_general'], 'level': 'INFO', 'propagate': False},
        # Add other app-specific loggers as needed
    }
}
# If DEBUG is True, ensure the debug file handler is active for the root logger
if DEBUG:
    # Ensure file_debug handler is present for root if not already
    if 'file_debug' not in LOGGING['root']['handlers']:
        LOGGING['root']['handlers'].append('file_debug')
    # Set root level to DEBUG if in debug mode for more verbose output
    LOGGING['root']['level'] = 'DEBUG'


# --- drf-yasg (Swagger/ReDoc) Settings ---
# https://drf-yasg.readthedocs.io/en/stable/settings.html
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {  # For API key authentication in Swagger UI
        'Token': {
            'type': 'apiKey',
            'name': 'Authorization',  # Header name
            'in': 'header',           # Location of the API key
            'description': "Token-based authentication. Use 'Token <your_token_here>'."
        }
    },
    'USE_SESSION_AUTH': False,  # Typically False for token-based APIs
    # Path to your openapi.Info object
    'DEFAULT_INFO': 'hms_django_backend.urls.api_info',
    'PERSIST_AUTH': True,  # Persist authorization in Swagger UI
    'REFETCH_SCHEMA_WITH_AUTH': True,  # Re-fetch schema when auth changes
    # 'LOGIN_URL': django_settings.LOGIN_URL, # If using session auth for Swagger
    # 'LOGOUT_URL': django_settings.LOGOUT_URL,
}
REDOC_SETTINGS = {
    'LAZY_RENDERING': False,  # Render ReDoc immediately
    'SPEC_URL_NAME': 'schema-json-yaml'  # Name of the URL for the schema file
}

# --- Celery Configuration (Example - Uncomment and configure if using Celery) ---
# CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')
# CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'django-db') # Using django-celery-results
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = TIME_ZONE # Use Django's timezone
# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler' # For django-celery-beat

# --- CORS Configuration (Example - Uncomment and configure if using django-cors-headers) ---
# CORS_ALLOWED_ORIGINS = [
#    "http://localhost:3000", # Example: Your frontend React app
#    "http://127.0.0.1:3000",
#    # Add other origins as needed
# ]
# CORS_ALLOW_CREDENTIALS = True # If you need to allow cookies/auth headers
# CORS_URLS_REGEX = r'^/api/.*$' # Apply CORS only to API paths

# --- Custom Application Settings (Example) ---
# HOSPITAL_NAME = os.environ.get('HOSPITAL_NAME', 'Default General Hospital')
# APPOINTMENT_REMINDER_DAYS = int(os.environ.get('APPOINTMENT_REMINDER_DAYS', 2))

# Add any other project-specific settings below this line
